/*****************
 * Custom Types */
export type InvoicesRow = Database["public"]["Tables"]["Invoices"]["Row"];
export type InvoicesInsert = Database["public"]["Tables"]["Invoices"]["Insert"];

/*****************
 * Generated by Supabase */

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export interface Database {
  public: {
    Tables: {
      Invoices: {
        Row: {
          billFromCity: string;
          billFromCountry: string;
          billFromPostCode: string;
          billFromStreet: string;
          billToCity: string;
          billToCountry: string;
          billToEmail: string;
          billToName: string;
          billToPostCode: string;
          billToStreet: string;
          createdAt: string;
          id: number;
          invoiceDate: Date;
          itemsList: Json[];
          paymentTerms: Database["public"]["Enums"]["paymentTerms"];
          projectDescription: string;
          status: Database["public"]["Enums"]["invoiceStatus"];
        };
        Insert: {
          billFromCity?: string;
          billFromCountry?: string;
          billFromPostCode?: string;
          billFromStreet?: string;
          billToCity?: string;
          billToCountry?: string;
          billToEmail?: string;
          billToName?: string;
          billToPostCode?: string;
          billToStreet?: string;
          createdAt?: string;
          id?: number;
          invoiceDate?: string | null;
          itemsList?: Json[];
          paymentTerms?: Database["public"]["Enums"]["paymentTerms"];
          projectDescription?: string;
          status?: Database["public"]["Enums"]["invoiceStatus"];
        };
        Update: {
          billFromCity?: string;
          billFromCountry?: string;
          billFromPostCode?: string;
          billFromStreet?: string;
          billToCity?: string;
          billToCountry?: string;
          billToEmail?: string;
          billToName?: string;
          billToPostCode?: string;
          billToStreet?: string;
          createdAt?: string;
          id?: number;
          invoiceDate?: string | null;
          itemsList?: Json[];
          paymentTerms?: Database["public"]["Enums"]["paymentTerms"];
          projectDescription?: string;
          status?: Database["public"]["Enums"]["invoiceStatus"];
        };
        Relationships: [];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      invoiceStatus: "draft" | "pending" | "paid";
      paymentTerms: "1" | "7" | "14" | "30";
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (Database["public"]["Tables"] & Database["public"]["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (Database["public"]["Tables"] &
        Database["public"]["Views"])
    ? (Database["public"]["Tables"] &
        Database["public"]["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
    ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
    ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof Database["public"]["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof Database["public"]["Enums"]
    ? Database["public"]["Enums"][PublicEnumNameOrOptions]
    : never;
